#!/usr/bin/env ruby

def table_to_set(table, header)
  result = Set.new()
  table.each do |current_row|
    current = current_row[header]
    if current.nil?
      raise "Error: no entry found for header " + header.to_s + " at " + current_row.inspect
    end
    
    unless result.include?(current)
      result.add(current)
    else
      raise "Error: duplicate entry for " + current.to_s
    end
  end
  return result
end

#parse command line arguments
settings = {}
unless ARGV.size == 5
  puts "Usage: kingdom-extraction sequences.fasta clean.csv contaminated.csv clean_output.fasta contaminated_output.fasta"
  exit
end

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
$LOAD_PATH.unshift(File.dirname(__FILE__))

require 'rubygems'
require 'csv'
require 'set'
require 'bio'
require 'kingdom-extraction/version'

puts "Running Kingdom-Extraction " +  Kingdom::Extraction::VERSION.to_s

settings[:input_fasta] = ARGV.shift
settings[:input_clean] = ARGV.shift
settings[:input_contaminated] = ARGV.shift
settings[:output_clean] = ARGV.shift
settings[:output_contaminated] = ARGV.shift

unless File.exists?(settings[:input_fasta])
  puts "The input file at " + File.expand_path(settings[:input_fasta]) + " could not be opened!"
  exit
end

unless File.exists?(settings[:input_clean])
  puts "The input file at " + File.expand_path(settings[:input_clean]) + " could not be opened!"
  exit
end

unless File.exists?(settings[:input_contaminated])
  puts "The input file at " + File.expand_path(settings[:input_contaminated]) + " could not be opened!"
  exit
end

if File.exists?(settings[:output_clean])
  puts "The input file at " + File.expand_path(settings[:output_clean]) + " already exists!"
  exit
end

if File.exists?(settings[:output_contaminated])
  puts "The input file at " + File.expand_path(settings[:output_contaminated]) + " already exists!"
  exit
end

#CSV backwards compatibility
if CSV.const_defined? :Reader
  require 'fastercsv'
  INSTALLED_CSV = FasterCSV
else
  INSTALLED_CSV = CSV
end

#Open output of Kingdom-Splitter, save clean and contaminated sequence ids in two sets
puts "Reading clean..."
clean_table = INSTALLED_CSV.open(settings[:input_clean], "r", { :col_sep => ";", :headers => :first_row, :header_converters => :symbol})
clean = table_to_set(clean_table, :query_sequence_id)
clean_table.close

puts "Reading contaminated..."
contaminated_table = INSTALLED_CSV.open(settings[:input_contaminated], "r", { :col_sep => ";", :headers => :first_row, :header_converters => :symbol})
contaminated = table_to_set(contaminated_table, :query_sequence_id)
contaminated_table.close

#Initialize output files
clean_out = File.open(settings[:output_clean], "w")
contaminated_out = File.open(settings[:output_contaminated], "w")

puts "Extracting FASTA sequences..."
QUERY_SEQ_REGEXP = /\A(\S+)\s.*\z/ #Make sure this is exactly the same as in BlastStringParser in Kingdom-Assignment

sequences = Bio::FastaFormat.open(settings[:input_fasta])
sequences.each do |entry|
  current = QUERY_SEQ_REGEXP.match(entry.definition)[1] #TODO do something when this comparison fails
  if clean.include?(current)
    #Sequence belongs in the clean set
    clean_out.write(entry)
  elsif contaminated.include?(current)
    #Sequence belongs in the contaminated set
    contaminated_out.write(entry)
  else
    #Sequence is not annotated
  end
  
end

sequences.close
clean_out.close
contaminated_out.close

puts "Done!"
